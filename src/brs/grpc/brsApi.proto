syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
option java_package = "brs.grpc.proto";

service BrsApiService {
    // Broadcast a transaction to the network.
    rpc BroadcastTransaction(BasicTransaction) returns (TransactionBroadcastResult) {}
    // Broadcast a transaction to the network. Takes transaction bytes instead of a BasicTransaction
    rpc BroadcastTransactionBytes(TransactionBytes) returns (TransactionBroadcastResult) {}
    // Automatically fills in the following fields: Version (based on current transaction version), type and subtype (based on specified attachment), timestamp (current time). Additionally sets attachment to ordinary payment if it was not set
    rpc CompleteBasicTransaction(BasicTransaction) returns (BasicTransaction) {}
    rpc GetAccount(GetAccountRequest) returns (Account) {}
    // Get the ATs that an account is the creator of, by the creator's account ID
    rpc GetAccountATs(GetAccountRequest) returns (AccountATs) {}
    // Get the blocks that an account has forged, by the forger's ID
    rpc GetAccountBlocks(GetAccountBlocksRequest) returns (Blocks) {}
    rpc GetAccountCurrentOrders(GetAccountOrdersRequest) returns (Orders) {}
    rpc GetAccountEscrowTransactions(GetAccountRequest) returns (EscrowTransactions) {}
    // Get multiple accounts based on the criteria described in GetAccountsRequest. The criteria is an OR selection - I.E. if you specified a reward recipient and a name it would include accounts that have that recipient and that name, including duplicates. Therefore it is recommended to only select one criteria
    rpc GetAccounts(GetAccountsRequest) returns (Accounts) {}
    rpc GetAccountSubscriptions(GetAccountRequest) returns (Subscriptions) {}
    rpc GetAccountTransactions(GetAccountTransactionsRequest) returns (Transactions) {}
    rpc GetAlias(GetAliasRequest) returns (Alias) {}
    rpc GetAliases(GetAliasesRequest) returns (Aliases) {}
    rpc GetAsset(GetByIdRequest) returns (Asset) {}
    // Get an asset's holders and their balances
    rpc GetAssetBalances(GetAssetBalancesRequest) returns (AssetBalances) {}
    // Get multiple assets in one go.
    rpc GetAssets(GetAssetsRequest) returns (Assets) {}
    // Get all assets issued by an account
    rpc GetAssetsByIssuer(GetAccountRequest) returns (Assets) {}
    // Get all asset trades made by an account
    rpc GetAssetTrades(GetAssetTransfersRequest) returns (AssetTrades) {}
    // Get all asset transfers made by an account
    rpc GetAssetTransfers(GetAssetTransfersRequest) returns (AssetTransfers) {}
    rpc GetAT(GetByIdRequest) returns (AT) {}
    // Get all active AT IDs
    rpc GetATIds(google.protobuf.Empty) returns (ATIds) {}
    // Get a block by ID, height or timestamp
    rpc GetBlock(GetBlockRequest) returns (Block) {}
    // Get the most recent blocks
    rpc GetBlocks(GetBlocksRequest) returns (Blocks) {}
    // Get the current blockchain constants
    rpc GetConstants(google.protobuf.Empty) returns (Constants) {}
    // Get the counts of different blockchain entities
    rpc GetCounts(google.protobuf.Empty) returns (Counts) {}
    // Get the current Burst time (number of seconds since Burst epoch)
    rpc GetCurrentTime(google.protobuf.Empty) returns (Time) {}
    rpc GetDgsGood(GetByIdRequest) returns (DgsGood) {}
    rpc GetDgsGoods(GetDgsGoodsRequest) returns (DgsGoods) {}
    rpc GetDgsPendingPurchases(GetDgsPendingPurchasesRequest) returns (DgsPurchases) {}
    rpc GetDgsPurchase(GetByIdRequest) returns (DgsPurchase) {}
    rpc GetDgsPurchases(GetDgsPurchasesRequest) returns (DgsPurchases) {}
    rpc GetEscrowTransaction(GetByIdRequest) returns (EscrowTransaction) {}
    // Get the mining info for the next block. This is needed to mine.
    rpc GetMiningInfo(google.protobuf.Empty) returns (stream MiningInfo) {}
    rpc GetOrder(GetOrderRequest) returns (Order) {}
    rpc GetOrders(GetOrdersRequest) returns (Orders) {}
    rpc GetPeer(GetPeerRequest) returns (Peer) {}
    rpc GetPeers(GetPeersRequest) returns (Peers) {}
    // Get the current server state
    rpc GetState(google.protobuf.Empty) returns (State) {}
    rpc GetSubscription(GetByIdRequest) returns (Subscription) {}
    rpc GetSubscriptionsToAccount(GetAccountRequest) returns (Subscriptions) {}
    rpc GetTransaction(GetTransactionRequest) returns (Transaction) {}
    // Convert a BasicTranscation into its transaction bytes, to be signed. This theoretically can be done offline so will be removed in the future.
    rpc GetTransactionBytes(BasicTransaction) returns (TransactionBytes) {}
    rpc GetUnconfirmedTransactions(GetAccountRequest) returns (UnconfirmedTransactions) {}
    // Convert TransactionBytes into a BasicTransaction. This theoretically can be done offline so will be removed in the future.
    rpc ParseTransaction(TransactionBytes) returns (BasicTransaction) {}
    // Submit a nonce to try to forge a block. This requires the passphrase to be sent to the server so should only be performed on local nodes.
    rpc SubmitNonce(SubmitNonceRequest) returns (SubmitNonceResponse) {}
    // Suggest a fee to use for a transaction
    rpc SuggestFee(google.protobuf.Empty) returns (FeeSuggestion) {}
}

message GetAccountTransactionsRequest {
    uint64 accountId = 1;
    uint32 timestamp = 2;
    IndexRange indexRange = 3;
    uint32 confirmations = 4;
    bool filterByType = 5; // This is needed because protobuf cannot distinguish between 0 and unset values.
    uint32 type = 6;
    uint32 subtype = 7;
}

message GetAccountBlocksRequest {
    uint64 accountId = 1;
    uint32 timestamp = 2;
    IndexRange indexRange = 3;
    // Include the full transaction objects of the block as well as the IDs
    bool includeTransactions = 4;
}

message GetByIdRequest {
    uint64 id = 1;
}

message GetDgsPendingPurchasesRequest {
    uint64 seller = 1;
    IndexRange indexRange = 2;
}

message GetDgsPurchasesRequest {
    uint64 seller = 1;
    uint64 buyer = 2;
    bool completed = 3;
    IndexRange indexRange = 4;
}

message EncryptedData {
    bytes data = 1;
    bytes nonce = 2;
}

message DgsPurchases {
    repeated DgsPurchase dgsPurchases = 1;
}

message DgsPurchase {
    uint64 id = 1;
    uint64 good = 2;
    uint64 seller = 3;
    uint64 buyer = 4;
    uint64 price = 5;
    uint64 quantity = 6;
    uint32 timestamp = 7;
    uint32 deliveryDeadlineTimestamp = 8;
    string goodName = 9;
    string goodDescription = 10;
    EncryptedData note = 11;
    bool isPending = 12;
    EncryptedData deliveredData = 13;
    bool deliveredDataIsText = 14;
    repeated EncryptedData feedback = 15;
    repeated string publicFeedback = 16;
    EncryptedData refundNote = 17;
    uint64 discount = 18;
    uint64 refund = 19;
}

message GetDgsGoodsRequest {
    uint64 seller = 1;
    bool inStockOnly = 2;
    IndexRange indexRange = 3;
}

message DgsGoods {
    repeated DgsGood goods = 1;
}

message DgsGood {
    uint64 id = 1;
    uint64 seller = 2;
    uint64 price = 3;
    uint64 quantity = 4;
    bool isDelisted = 5;
    uint32 timestamp = 6;
    string name = 7;
    string description = 8;
    string tags = 9;
}

enum AssetTradeType {
    AssetTradeType_UNSET = 0;
    BUY = 1;
    SELL = 2;
}

message GetAssetTransfersRequest {
    uint64 asset = 1;
    uint64 account = 2;
    IndexRange indexRange = 3;
}

message AssetTrades {
    repeated AssetTrade trades = 1;
}

message AssetTransfers {
    repeated AssetTransfer assetTransfers = 1;
}

message AssetTransfer {
    uint64 id = 1;
    uint64 asset = 2;
    uint64 sender = 3;
    uint64 recipient = 4;
    uint64 quantity = 5;
    uint32 height = 6;
    uint32 timestamp = 7;
    string assetName = 8;
    string assetDescription = 9;
}

message AssetTrade {
    uint64 asset = 1;
    AssetTradeType tradeType = 2;
    uint64 seller = 3;
    uint64 buyer = 4;
    uint64 price = 5;
    uint64 quantity = 6;
    uint64 askOrder = 7;
    uint64 bidOrder = 8;
    uint32 askOrderHeight = 9;
    uint32 bidOrderHeight = 10;
    uint64 block = 11;
    uint32 height = 12;
    uint32 timestamp = 13;
    string assetName = 14;
    string assetDescription = 15;
}

message GetOrdersRequest {
    uint64 asset = 1; // If 0 returns all open orders.
    OrderType orderType = 2;
    IndexRange indexRange = 3;
}

message GetOrderRequest {
    uint64 orderId = 1;
    OrderType orderType = 2;
}

message GetOpenOrdersRequest {
    OrderType orderType = 1;
    IndexRange indexRange = 2;
}

message GetAssetBalancesRequest {
    uint64 asset = 1;
    uint32 height = 2;
    IndexRange indexRange = 3;
}

message GetAssetsRequest {
    repeated uint64 asset = 1;
}

message Assets {
    repeated Asset assets = 1;
}

message Asset {
    uint64 asset = 1;
    uint64 account = 2;
    string name = 3;
    string description = 4;
    uint64 quantity = 5;
    uint32 decimals = 6;
    uint32 numberOfTrades = 7;
    uint32 numberOfTransfers = 8;
    uint32 numberOfAccounts = 9;
}

message Transactions {
    repeated Transaction transactions = 1;
}

message Subscriptions {
    repeated Subscription subscriptions = 1;
}

message Subscription {
    uint64 id = 1;
    uint64 sender = 2;
    uint64 recipient = 3;
    uint64 amount = 4;
    uint32 frequency = 5;
    uint32 timeNext = 6;
}

message Counts {
    uint32 numberOfBlocks = 1;
    uint32 numberOfTransactions = 2;
    uint32 numberOfAccounts = 3;
    uint32 numberOfAssets = 4;
    uint32 numberOfOrders = 5;
    uint32 numberOfAskOrders = 6;
    uint32 numberOfBidOrders = 7;
    uint32 numberOfTrades = 8;
    uint32 numberOfTransfers = 9;
    uint64 numberOfAliases = 10;
    uint32 numberOfPeers = 11;
    uint32 numberOfGenerators = 12;
    uint64 totalEffectiveBalance = 13;
}

message Constants {
    uint64 genesisBlock = 1;
    uint64 genesisAccount = 2;
    uint32 maxBlockPayloadLength = 3;
    uint32 maxArbitraryMessageLength = 4;
    repeated TransactionType transactionTypes = 5;

    message TransactionType {
        uint32 type = 1;
        string description = 2;
        repeated TransactionSubtype subtypes = 3;

        message TransactionSubtype {
            uint32 subtype = 1;
            string description = 2;
        }
    }
}

message EscrowTransactions {
    repeated EscrowTransaction escrowTransactions = 1;
}

message EscrowTransaction {
    uint64 escrowId = 1;
    uint64 sender = 2;
    uint64 recipient = 3;
    uint64 amount = 4;
    uint32 requiredSigners = 5;
    uint32 deadline = 6;
    EscrowDecisionType deadlineAction = 7;
}

message Orders {
    repeated Order orders = 1;
}

message Order {
    uint64 id = 1;
    uint64 asset = 2;
    uint64 account = 3;
    uint64 quantity = 4;
    uint64 price = 5;
    uint32 height = 6;
    OrderType type = 7;
}

message GetAccountOrdersRequest {
    uint64 account = 1;
    uint64 asset = 2;
    IndexRange indexRange = 3;
    OrderType orderType = 4;
}

message IndexRange {
    uint32 firstIndex = 1;
    uint32 lastIndex = 2;
}

message GetBlocksRequest {
    IndexRange indexRange = 1;
    bool includeTransactions = 2;
}

message Blocks {
    repeated Block blocks = 1;
}

message GetAliasesRequest {
    uint64 owner = 1;
    uint32 timestamp = 2;
    IndexRange indexRange = 3;
}

message UnconfirmedTransactions {
    repeated Transaction unconfirmedTransactions = 1;
}

message Aliases {
    repeated Alias aliases = 1;
}

message ATIds {
    repeated uint64 ids = 1;
}

message AT {
    uint64 id = 1;
    uint64 creator = 2;
    uint32 version = 3;
    string name = 4;
    string description = 5;
    bytes machineCode = 6;
    bytes machineData = 7;
    uint64 balance = 8;
    uint64 previousBalance = 9;
    uint32 nextBlock = 10;
    bool frozen = 11;
    bool running = 12;
    bool stopped = 13;
    bool finished = 14;
    bool dead = 15;
    uint64 minActivation = 16;
    uint32 creationBlock = 17;
}

message AccountATs {
    repeated AT ats = 1;
}

// A basic transaction represents all of the data that you would find in the transaction bytes.
message BasicTransaction {
    bytes senderPublicKey = 1;
    uint64 senderId = 2;
    uint64 recipient = 3;
    uint32 version = 4; // Auto-filled if needed
    uint32 type = 5; // Auto-filled if needed
    uint32 subtype = 6; // Auto-filled if needed
    uint64 amount = 7;
    uint64 fee = 8;
    uint32 timestamp = 9; // Auto-filled if needed
    uint32 deadline = 10;
    repeated google.protobuf.Any appendages = 11;
    google.protobuf.Any attachment = 12;
    bytes referencedTransactionFullHash = 13;
    uint64 ecBlockId = 14;
    uint32 ecBlockHeight = 15;
    bytes signature = 16;
}

message GetPeerRequest {
    string peerAddress = 1;
}

message GetPeersRequest {
    bool active = 1;
    PeerState state = 2;
}

enum PeerState {
    PeerState_UNSET = 0;
    NON_CONNECTED = 1;
    CONNECTED = 2;
    DISCONNECTED = 3;
}

message Peer {
    PeerState state = 1;
    string announcedAddress = 2;
    bool shareAddress = 3;
    uint64 downloadedVolume = 4;
    uint64 uploadedVolume = 5;
    string application = 6;
    string version = 7;
    string platform = 8;
    bool blacklisted = 9;
    uint32 lastUpdated = 10;
}

message Peers {
    repeated string peerAddresses = 1;
}

message GetAliasRequest {
    uint64 id = 1;
    string name = 2;
}

message Alias {
    uint64 id = 1;
    uint64 owner = 2;
    string name = 3;
    string uri = 4;
    uint32 timestamp = 5;
    bool offered = 6;
    uint64 price = 7;
    uint64 buyer = 8;
}

message Time {
    // Number of seconds since the Burst epoch (2014-08-11 02:00:00 UTC)
    uint32 time = 1;
}

message State {
    string application = 1;
    string version = 2;
    Time time = 3;
    uint64 lastBlock = 4;
    uint32 lastHeight = 5;
    string cumulativeDifficulty = 6;
    uint32 numberOfPeers = 7;
    uint32 numberOfActivePeers = 8;
    uint32 numberOfForgers = 9;
    string lastBlockchainFeeder = 10;
    uint32 lastBlockchainFeederHeight = 11;
    bool isScanning = 12;
    uint32 availableProcessors = 13;
    uint64 maxMemory = 14;
    uint64 totalMemory = 15;
    uint64 freeMemory = 16;
    bool indirectIncomingServiceEnabled = 17;
}

message FeeSuggestion {
    uint64 cheap = 1;
    uint64 standard = 2;
    uint64 priority = 3;
}

message TransactionBroadcastResult {
    // The number of peers this transaction was broadcast to, not including the server.
    uint32 numberOfPeersSentTo = 1;
}

message GetBlockRequest {
    uint64 blockId = 1;
    uint32 height = 2;
    uint32 timestamp = 3;
    bool includeTransactions = 4;
}

message GetAccountRequest {
    uint64 accountId = 1;
}

message GetAccountsRequest {
    // The reward recipient of the accounts
    uint64 rewardRecipient = 1;
    // The name of the accounts
    string name = 2;
    // Whether to include the full account object in the response. If this is set to false, Accounts.accounts will not be populated.
    bool includeAccounts = 3;
}

message GetTransactionRequest {
    uint64 transactionId = 1;
    bytes fullHash = 2;
}

message SubmitNonceRequest {
    string secretPhrase = 1;
    uint64 nonce = 2;
    uint64 account = 3;
    uint32 blockHeight = 4;
}

message SubmitNonceResponse {
    uint64 deadline = 1;
}

message Block {
    uint64 id = 1;
    uint32 height = 2;
    uint32 numberOfTransactions = 3;
    uint64 totalAmount = 4;
    uint64 totalFee = 5;
    uint64 blockReward = 6;
    uint32 payloadLength = 7;
    int32 version = 8;
    uint64 baseTarget = 9;
    uint32 timestamp = 10;
    bytes generationSignature = 11;
    bytes blockSignature = 12;
    bytes payloadHash = 13;
    repeated Transaction transactions = 14;
    repeated uint64 transactionIds = 15;
    bytes generatorPublicKey = 16;
    uint64 nonce = 17;
    uint32 scoop = 18;
    bytes previousBlockHash = 19;
    uint64 nextBlockId = 20;
}

message Transaction {
    BasicTransaction transaction = 1;
    uint64 id = 2;
    bytes transactionBytes = 3;
    uint64 block = 4;
    uint32 blockHeight = 5;
    uint32 blockTimestamp = 6;
    bytes signature = 7;
    bytes fullHash = 8;
    sint32 confirmations = 9;
}

message MessageAppendix {
    uint32 version = 1;
    bytes message = 2;
    bool isText = 3;
}

message EncryptedMessageAppendix {
    uint32 version = 1;
    EncryptedData encryptedData = 2;
    bool isText = 3;
    Type type = 4;

    enum Type {
        Type_UNSET = 0;
        TO_RECIPIENT = 1;
        TO_SELF = 2;
    }
}

message PublicKeyAnnouncementAppendix {
    uint32 version = 1;
    bytes recipientPublicKey = 2;
}

message MultiOutAttachment {
    uint32 version = 1;
    repeated MultiOutRecipient recipients = 2;

    message MultiOutRecipient {
        uint64 recipient = 1;
        uint64 amount = 2;
    }
}

message MultiOutSameAttachment {
    uint32 version = 1;
    repeated uint64 recipients = 2;
}

message AliasAssignmentAttachment {
    uint32 version = 1;
    string name = 2;
    string uri = 3;
}

message AliasSellAttachment {
    uint32 version = 1;
    string name = 2;
    uint64 price = 3;
}

message AliasBuyAttachment {
    uint32 version = 1;
    string name = 2;
}

message AccountInfoAttachment {
    uint32 version = 1;
    string name = 2;
    string description = 3;
}

message AssetIssuanceAttachment {
    uint32 version = 1;
    string name = 2;
    string description = 3;
    uint64 quantity = 4;
    uint32 decimals = 5;
}

message AssetTransferAttachment {
    uint32 version = 1;
    uint64 asset = 2;
    uint64 quantity = 3;
    string comment = 4;
}

enum OrderType {
    OrderType_UNSET = 0;
    ASK = 1;
    BID = 2;
}

message AssetOrderPlacementAttachment {
    uint32 version = 1;
    uint64 asset = 2;
    uint64 quantity = 3;
    uint64 price = 4;
    OrderType type = 5;
}

message AssetOrderCancellationAttachment {
    uint32 version = 1;
    uint64 order = 2;
    OrderType type = 3;
}

message DigitalGoodsListingAttachment {
    uint32 version = 1;
    string name = 2;
    string description = 3;
    string tags = 4;
    uint32 quantity = 5;
    uint64 price = 6;
}

message DigitalGoodsDelistingAttachment {
    uint32 version = 1;
    uint64 goods = 2;
}

message DigitalGoodsPriceChangeAttachment {
    uint32 version = 1;
    uint64 goods = 2;
    uint64 price = 3;
}

message DigitalGoodsQuantityChangeAttachment {
    uint32 version = 1;
    uint64 goods = 2;
    sint32 deltaQuantity = 3;
}

message DigitalGoodsPurchaseAttachment {
    uint32 version = 1;
    uint64 goods = 2;
    uint32 quantity = 3;
    uint64 price = 4;
    uint32 deliveryDeadlineTimestmap = 5;
}

message DigitalGoodsDeliveryAttachment {
    uint32 version = 1;
    uint64 purchase = 2;
    uint64 discount = 3;
    EncryptedData goods = 4;
    bool isText = 5;
}

message DigitalGoodsFeedbackAttachment {
    uint32 version = 1;
    uint64 purchase = 2;
}

message DigitalGoodsRefundAttachment {
    uint32 version = 1;
    uint64 purchase = 2;
    uint64 refund = 3;
}

message EffectiveBalanceLeasingAttachment {
    uint32 version = 1;
    uint32 period = 2;
}

message RewardRecipientAssignmentAttachment {
    uint32 version = 1;
}

message EscrowCreationAttachment {
    uint32 version = 1;
    uint64 amount = 2;
    uint32 requiredSigners = 3;
    repeated uint64 signers = 4;
    uint32 deadline = 5;
    EscrowDecisionType deadlineAction = 6;
}

message EscrowSignAttachment {
    uint32 version = 1;
    uint64 escrow = 2;
    EscrowDecisionType decision = 3;
}

message EscrowResultAttachment {
    uint32 version = 1;
    uint64 escrow = 2;
    EscrowDecisionType decision = 3;
}

message SubscriptionSubscribeAttachment {
    uint32 version = 1;
    uint32 frequency = 2;
}

message SubscriptionCancelAttachment {
    uint32 version = 1;
    uint64 subscription = 2;
}

message SubscriptionPaymentAttachment {
    uint32 version = 1;
    uint64 subscription = 2;
}

message ATCreationAttachment {
    uint32 version = 1;
    string name = 2;
    string description = 3;
    bytes creationBytes = 4;
}

enum EscrowDecisionType {
    EscrowDecisionType_UNSET = 0;
    UNDECIDED = 1;
    RELEASE = 2;
    REFUND = 3;
    SPLIT = 4;
}

message Accounts {
    // The Account IDs.
    repeated uint64 ids = 1;
    // The full account objects. Only populated if includeAccounts was set to true in the request.
    repeated Account accounts = 2;
}

message Account {
    uint64 id = 1;
    bytes publicKey = 2;
    uint64 balance = 3;
    uint64 unconfirmedBalance = 4;
    uint64 forgedBalance = 5;
    string name = 6;
    string description = 7;
    uint64 rewardRecipient = 8;
    repeated AssetBalance assetBalances = 9;
}

message AssetBalances {
    repeated AssetBalance assetBalances = 1;
}

message AssetBalance {
    uint64 asset = 1;
    uint64 account = 2;
    uint64 balance = 3;
    uint64 unconfirmedBalance = 4;
}

message MiningInfo {
    uint32 height = 1;
    bytes generationSignature = 2;
    uint64 baseTarget = 3;
}

message TransactionBytes {
    bytes transactionBytes = 1;
}

message OrdinaryPaymentAttachment {
    // Empty.
}

message ArbitraryMessageAttachment {
    // Empty.
}

message ATPaymentAttachment { // TODO version
    // Empty.
}
